<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A blog about iOS dev with RubyMotion]]></title>
  <link href="http://paulsturgess.github.io/atom.xml" rel="self"/>
  <link href="http://paulsturgess.github.io/"/>
  <updated>2013-04-25T13:48:18+01:00</updated>
  <id>http://paulsturgess.github.io/</id>
  <author>
    <name><![CDATA[Paul Sturgess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello Octopress & Github pages]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/04/24/hello-octopress-and-github-pages/"/>
    <updated>2013-04-24T19:51:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/04/24/hello-octopress-and-github-pages</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> is a static blog generator. It uses
<a href="https://github.com/mojombo/jekyll">Jekyll</a> which was created by Github to run
<a href="http://pages.github.com">Github Pages</a> and now I&#8217;m using it to power my
re-launched blog.</p>

<p>I&#8217;m attracted by the prospect of using Octopress because it&#8217;s dead simple. It
generates the blog content as flat pages so it&#8217;s super fast. It allows me to
write using <a href="http://daringfireball.net/projects/markdown/">Markdown</a> and deploy
via <a href="http://git-scm.com/">Git</a>.</p>

<p>There&#8217;s no server setup and no hosting fees, as it&#8217;s hosted using Github
Pages. Also it&#8217;s written in Ruby, so it works with all the tools I&#8217;m familiar with.</p>

<p>What follows is more for my reference than anything, so I can remember how I set
things up.</p>

<h2>Initial setup</h2>

<p>Create a new Github repo named <code>yourgithubusername.github.io</code>.</p>

<p>The name is important here as Github Pages will automatically find this repo and
server up the pages in the <code>master</code> branch as your website at
<code>http://yourgithubusername.github.io</code>.</p>

<p>Grab Octopress and change directory:</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git yourgithubusername.github.io
$ cd yourgithubusername.github.io
</code></pre>

<p>Octopress has its&#8217; own rvmrc file, but I like to use gemsets, so I created my own
before installing bundler and the required gems:</p>

<pre><code>$ rvm use 1.9.3@yourgemsetname --create --rvmrc
$ gem install bundler
$ bundle install
</code></pre>

<p>Install the default theme:</p>

<pre><code>$ rake install
</code></pre>

<p>Octopress has a configuration rake task that automatically sets the repo up for
easy deployment to Github Pages:</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>This task does quite a few things. The most important is that it creates a new
<code>_deploy</code> directory that is another git repository. This is where Octopress
generates the flat website for deployment to the <code>master</code> branch of your repo
on Github.</p>

<p>All the Octopress code used to generate the website into the <code>_deploy</code> directory
now lives in new branch called <code>source</code>. Note in the <code>source</code> branch the
<code>.gitignore</code> includes <code>_deploy</code> so it doesn&#8217;t get committed in two places!</p>

<p>This sounds more complicated than it is, Octopress has rake tasks to make this
really easy to manage. It&#8217;s worth pushing up at this point to check everything
works before tinkering:</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>This copies the generated files into <code>_deploy</code>, adds them to git, commits and
pushes them up to the <code>master</code> branch.</p>

<p>Visit <code>http://yourgithubusername.github.io</code></p>

<p>Note at this point only the website has been committed, the source needs to be
comitted separately via:</p>

<pre><code>$ git add .
$ git commit -m 'Initial source commit'
$ git push origin source
</code></pre>

<h2>Running Octopress locally</h2>

<p>Octopress works really well with <a href="http://pow.cx">POW server</a>.</p>

<pre><code>$ cd ~/.pow
$ ln -s /path/to/your/octopress/site yoursitename
</code></pre>

<p>Now that youâ€™re setup with POW, checkout the <code>source</code> branch and run:</p>

<pre><code>$ rake watch
</code></pre>

<p>Load up <code>http://yoursitename.dev</code></p>

<h2>Theme customisation</h2>

<p>I&#8217;m using the <a href="https://github.com/lucaslew/whitespace">&#8216;Whitespace&#8217; theme</a> by lucaslew.
 <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Other themes are available</a>.</p>

<p>I&#8217;ve tweaked the header to remove the search and include navigation links to my Twitter and Github accounts.</p>

<p>I installed the theme by running the following in the root of the <code>source</code> branch.
 Say yes when it asks you to overwrite existing files.</p>

<pre><code>$ git clone git://github.com/lucaslew/whitespace.git .themes/whitespace
$ rake install['whitespace']
$ rake generate
</code></pre>

<h2>_config.yml</h2>

<p>This is where the main site configuration lives. Things like the blog title and various 3rd Party Settings, your Twitter and Github handles etc.</p>

<p>Changes to <code>_config.yml</code> will require you to restart the <code>rake watch</code> task if
you&#8217;re POW server.</p>

<h2>Creating this post</h2>

<p>As easy as:</p>

<pre><code>rake new_post["Hello Octopress and Github pages"]
</code></pre>

<h2>Deploying to Github Pages</h2>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>Just rememeber to manually commit changes made in the <code>source</code> branch.</p>

<h2>Custom domain</h2>

<p>Inside your <code>source</code> branch run the following:</p>

<pre><code>echo 'your-domain.com' &gt;&gt; source/CNAME
</code></pre>

<p>Deploy up to Gitbub and then point an <code>A record</code> (for your naked domain) to <code>207.97.227.245</code></p>

<p>For <code>www</code> just point a <code>CNAME record</code> to yourgithubusername.github.io</p>

<h2>Working from another machine</h2>

<p>As the <code>_deploy</code> directory is in the <code>.gitignore</code>, the easiest thing is to clone
the <code>source</code> branch and then setup the <code>_deploy</code> branch manually.</p>

<pre><code>$ git clone -b source git@github.com:username/username.github.io.git username.github.io
$ cd username.github.io
$ bundle install
$ mkdir _deploy
$ cd _deploy
$ git init
$ git remote add origin git@github.com:username/username.github.io.git
$ git pull origin master
$ cd ..
</code></pre>
]]></content>
  </entry>
  
</feed>
