<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A blog about iOS dev with RubyMotion]]></title>
  <link href="http://paulsturgess.github.io/atom.xml" rel="self"/>
  <link href="http://paulsturgess.github.io/"/>
  <updated>2013-04-25T22:23:40+01:00</updated>
  <id>http://paulsturgess.github.io/</id>
  <author>
    <name><![CDATA[Paul Sturgess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C for a Rubyist]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/04/25/objective-c-for-a-rubyist/"/>
    <updated>2013-04-25T21:04:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/04/25/objective-c-for-a-rubyist</id>
    <content type="html"><![CDATA[<p><a href="http://www.rubymotion.com/">RubyMotion</a> does a great job of allowing iOS apps to be written in Ruby. However,
whilst I want to avoid writing Objective-C, I do want to learn how to read it.</p>

<ul>
<li>It&#8217;ll make it easier to learn Apple&#8217;s SDK</li>
<li>I want to be able to read existing iOS books/articles/stackoverflow solutions</li>
<li>It just seems like a good idea</li>
</ul>


<p>Fortunately both languages stem from Smalltalk, so they&#8217;re not a million miles
apart.</p>

<h2>Instance variables</h2>

<pre><code>- (void)instanceVariable;
</code></pre>

<ul>
<li><code>-</code> means instance.</li>
<li>next is the return type: <code>void</code> which means it returns nothing.</li>
<li>Finally we have the method name, in this case <code>instanceVariable</code>.</li>
</ul>


<p>Everything in Objective-C is camelCase. The common idiom in
 RubyMotion is to write Ruby in camel case where you are implementing
 classes that use Apple&#8217;s Objective-C methods. Reverting back to snake_case when
 the class is pure Ruby.</p>

<h2>Class methods</h2>

<pre><code>+ (User *)userWithName:(NSString *)name;
</code></pre>

<ul>
<li><code>+</code> means class method</li>
<li>next is the return type. In this case a <code>User</code> pointer.</li>
<li>next is the method name: <code>userWithName</code></li>
<li>next is a colon <code>:</code>, which means there is an argument.</li>
<li>next, in brackets, is the argument type. A pointer to an <code>NSString</code> instance.</li>
<li>Finally the argument variable <code>name</code></li>
</ul>


<p>So just be clear, in Ruby this is:</p>

<pre><code>def self.userWithName(name)
    #...
end
</code></pre>

<h2>Sending messages</h2>

<p>As with all Smalltalk based languages, you are essentially creating methods in
classes to send messages around. I believe Objective-C does have a dot notation,
like Ruby, but most code examples I&#8217;ve come across use spaces and lots of square
brackets.</p>

<p>For example in Objective-C sending the <code>logOut</code> message to a <code>user</code> object is:</p>

<pre><code>[user logOut];
</code></pre>

<p>The Ruby equivalent:</p>

<pre><code>user.logOut
</code></pre>

<p>To chain methods in Objective-C it looks like:</p>

<pre><code>NSMutableArray *myArray = [NSMutableArray alloc] init];
</code></pre>

<p>This is equivalent to the Ruby:</p>

<pre><code>myArray = NSMutableArray.alloc.init
</code></pre>

<h2>reallyLongMethod:WithNamedParameters:</h2>

<p>In Objective-C named parameters are heavily used. This is great for clarity, as
they are intended to be as descriptive as possible. Removing the ambiguity is
really good, but it is important to know that named parameters are actually
included in the method name.</p>

<p>So an example Apple SDK method is <code>tableView:numberOfRowsInSection:</code>. Where the
colons indicate an argument is required. So in this case, two. In Objective-C it
looks like:</p>

<pre><code>- (Integer) tableView(tableView, numberOfRowsInSection:section)
</code></pre>

<p>RubyMotion currently runs on Ruby 1.9.3, so named arguments have been added
especially. The above method looks like the following in RubyMotion:</p>

<pre><code>def tableView(tableView, numberOfRowsInSection: section)
  # ...
end
</code></pre>

<p>This can look a bit strange at times when the Apple SDK requires you to implement
methods that start with the same name, but take different arguments. If you are
not aware that the named named arguments are used in the method name, it actually
looks like you&#8217;re implementing the same method multiple times.</p>

<p>For example, another Apple SDK method <code>tableView:editingStyleForRowAtIndexPath:</code> looks very similar in RubyMotion:</p>

<pre><code>def tableView(tableView, editingStyleForRowAtIndexPath: indexPath)
  # ...
end
</code></pre>

<h2>In summary</h2>

<p>Objective-C is definitely more verbose, but I really like the RubyMotion
implementation. There&#8217;s loads more to get my head around, but this is a good
starting point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress & Github pages]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/04/24/hello-octopress-and-github-pages/"/>
    <updated>2013-04-24T19:51:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/04/24/hello-octopress-and-github-pages</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> is a static blog generator. It uses
<a href="https://github.com/mojombo/jekyll">Jekyll</a> which was created by Github to run
<a href="http://pages.github.com">Github Pages</a> and now I&#8217;m using it to power my
re-launched blog.</p>

<p>I&#8217;m attracted by the prospect of using Octopress because it&#8217;s dead simple. It
generates the blog content as flat pages so it&#8217;s super fast. It allows me to
write using <a href="http://daringfireball.net/projects/markdown/">Markdown</a> and deploy
via <a href="http://git-scm.com/">Git</a>.</p>

<p>There&#8217;s no server setup and no hosting fees, as it&#8217;s hosted using Github
Pages. Also it&#8217;s written in Ruby, so it works with all the tools I&#8217;m familiar with.</p>

<p>What follows is more for my reference than anything, so I can remember how I set
things up.</p>

<h2>Initial setup</h2>

<p>Create a new Github repo named <code>yourgithubusername.github.io</code>.</p>

<p>The name is important here as Github Pages will automatically find this repo and
serve up the content it finds in the <code>master</code> branch as your website at
<code>http://yourgithubusername.github.io</code>.</p>

<p>Grab Octopress and change directory:</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git yourgithubusername.github.io
$ cd yourgithubusername.github.io
</code></pre>

<p>Octopress has its&#8217; own rvmrc file, but I like to use gemsets, so I created my own
before installing bundler and the required gems:</p>

<pre><code>$ rvm use 1.9.3@yourgemsetname --create --rvmrc
$ gem install bundler
$ bundle install
</code></pre>

<p>Install the default theme:</p>

<pre><code>$ rake install
</code></pre>

<p>Octopress has a configuration rake task that automatically sets the repo up for
easy deployment to Github Pages:</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>This task does quite a few things. The most important is that it creates a new
<code>_deploy</code> directory that is another git repository. This is where Octopress
generates the flat website for deployment to the <code>master</code> branch of your repo
on Github.</p>

<p>All the Octopress code used to generate the website into the <code>_deploy</code> directory
now lives in new branch called <code>source</code>. Note in the <code>source</code> branch the
<code>.gitignore</code> includes <code>_deploy</code> so it doesn&#8217;t get committed in two places!</p>

<p>This sounds more complicated than it is, Octopress has rake tasks to make this
really easy to manage. It&#8217;s worth pushing up at this point to check everything
works before tinkering:</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>This copies the generated files into <code>_deploy</code>, adds them to git, commits and
pushes them up to the <code>master</code> branch.</p>

<p>Visit <code>http://yourgithubusername.github.io</code></p>

<p>Note at this point only the website has been committed, the source needs to be
comitted separately via:</p>

<pre><code>$ git add .
$ git commit -m 'Initial source commit'
$ git push origin source
</code></pre>

<h2>Running Octopress locally</h2>

<p>Octopress works really well with <a href="http://pow.cx">POW server</a>.</p>

<pre><code>$ cd ~/.pow
$ ln -s /path/to/your/octopress/site yoursitename
</code></pre>

<p>Now that youâ€™re setup with POW, checkout the <code>source</code> branch and run:</p>

<pre><code>$ rake watch
</code></pre>

<p>Load up <code>http://yoursitename.dev</code></p>

<h2>Theme customisation</h2>

<p>I&#8217;m using the <a href="https://github.com/lucaslew/whitespace">&#8216;Whitespace&#8217; theme</a> by lucaslew.
 <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Other themes are available</a>.</p>

<p>I&#8217;ve tweaked the header to remove the search and include navigation links to my Twitter and Github accounts.</p>

<p>I installed the theme by running the following in the root of the <code>source</code> branch.
 Say yes when it asks you to overwrite existing files.</p>

<pre><code>$ git clone git://github.com/lucaslew/whitespace.git .themes/whitespace
$ rake install['whitespace']
$ rake generate
</code></pre>

<h2>_config.yml</h2>

<p>This is where the main site configuration lives. Things like the blog title and various 3rd Party Settings, your Twitter and Github handles etc.</p>

<p>Changes to <code>_config.yml</code> will require you to restart the <code>rake watch</code> task if
you&#8217;re using POW server.</p>

<h2>Creating this post</h2>

<p>As easy as:</p>

<pre><code>rake new_post["Hello Octopress and Github pages"]
</code></pre>

<h2>Deploying to Github Pages</h2>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>Just rememeber to manually commit changes made in the <code>source</code> branch.</p>

<h2>Custom domain</h2>

<p>Inside your <code>source</code> branch run the following:</p>

<pre><code>echo 'your-domain.com' &gt;&gt; source/CNAME
</code></pre>

<p>Deploy up to Gitbub and then point an <code>A record</code> (for your naked domain) to <code>207.97.227.245</code></p>

<p>For <code>www</code> just point a <code>CNAME record</code> to yourgithubusername.github.io</p>

<h2>Working from another machine</h2>

<p>As the <code>_deploy</code> directory is in the <code>.gitignore</code>, the easiest thing is to clone
the <code>source</code> branch and then setup the <code>_deploy</code> branch manually.</p>

<pre><code>$ git clone -b source git@github.com:username/username.github.io.git username.github.io
$ cd username.github.io
$ bundle install
$ mkdir _deploy
$ cd _deploy
$ git init
$ git remote add origin git@github.com:username/username.github.io.git
$ git pull origin master
$ cd ..
</code></pre>
]]></content>
  </entry>
  
</feed>
