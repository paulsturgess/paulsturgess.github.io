<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A blog about iOS dev with RubyMotion]]></title>
  <link href="http://paulsturgess.github.io/atom.xml" rel="self"/>
  <link href="http://paulsturgess.github.io/"/>
  <updated>2014-03-31T09:19:23+01:00</updated>
  <id>http://paulsturgess.github.io/</id>
  <author>
    <name><![CDATA[Paul Sturgess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using MagicalRecord and Core Data in RubyMotion]]></title>
    <link href="http://paulsturgess.github.io/blog/2014/02/20/using-magicalrecord-and-core-data-in-rubymotion/"/>
    <updated>2014-02-20T13:36:00+00:00</updated>
    <id>http://paulsturgess.github.io/blog/2014/02/20/using-magicalrecord-and-core-data-in-rubymotion</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/magicalpanda/MagicalRecord">MagicalRecord</a> is a wrapper around Apple&#8217;s <a href="http://en.wikipedia.org/wiki/Core_Data">Core Data Framework</a>. Written in Objective-C,
it&#8217;s one of the most popular and mature libraries for working with Core Data.</p>

<p>I really like it as it simplifies a lot of the code, whilst
it still allows you to &#8216;get your hands dirty&#8217; when necessary.</p>

<p>This article details how I&#8217;m using it. This is by no means the &#8216;perfect&#8217; solution,
as I am evolving it all the time, but it is working well for me. By all means
get in touch if you think I&#8217;m missing any obvious tricks.</p>

<p>One thing I have found is that it&#8217;s pretty much impossible to hide the fact you
are using CoreData. Particularly with the requirement of a different context for each
thread. But what I do want to do is make things as simple, consistent and maintainable
as possible.</p>

<h2>Installation</h2>

<p>At the time of writing I&#8217;m using the <a href="https://github.com/magicalpanda/MagicalRecord/tree/release/3.0">MagicalRecord 3.0 branch</a>,
installed via <a href="https://github.com/HipByte/motion-cocoapods">motion-cocoaopds</a>. My <code>Rakefile</code> includes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.pods do
</span><span class='line'>  pod 'MagicalRecord', :git =&gt; 'https://github.com/magicalpanda/MagicalRecord.git', :branch =&gt;'release/3.0'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping MagicalRecord</h2>

<p>First I have a <code>Database</code> class to wrap common MagicalRecord tasks.</p>

<p>The main reason for this class is so that I do not sprinkle MagicalRecord calls
all around my code. Having them all in one place will make it easy to update if/when
the MagicalRecord api changes. It also encourages consistency in my usage of MagicalRecord
as, for example, there are many ways to persist your data.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Database
</span><span class='line'>
</span><span class='line'>  def self.filename
</span><span class='line'>    "YourApplicationName.sqlite"
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.path
</span><span class='line'>    File.join(
</span><span class='line'>      NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, NSUserDomainMask, true),
</span><span class='line'>      "YourApplicationName",
</span><span class='line'>      self.filename
</span><span class='line'>    )
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.created?
</span><span class='line'>    File.exist?(self.path)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.loadOrCreate
</span><span class='line'>    MagicalRecord.setupAutoMigratingStack
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.createTestDB
</span><span class='line'>    MagicalRecord.setupStackWithInMemoryStore
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.delete
</span><span class='line'>    if self.created?
</span><span class='line'>      self.cleanUp
</span><span class='line'>      File.delete(self.path)
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.reset
</span><span class='line'>    Database.delete
</span><span class='line'>    Database.loadOrCreate
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.cleanUp
</span><span class='line'>    MagicalRecord.cleanUp
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.defaultLocalContext
</span><span class='line'>    MagicalRecordStack.defaultStack.context
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.backgroundLocalContext
</span><span class='line'>    NSManagedObjectContext.MR_confinementContextWithParent(defaultLocalContext)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.save_specific_context(localContext, callback = nil)
</span><span class='line'>    localContext.MR_saveToPersistentStoreWithCompletion(
</span><span class='line'>      lambda { |success, error|
</span><span class='line'>        NSLog("success: %@", success)
</span><span class='line'>        if success
</span><span class='line'>          callback.call if callback
</span><span class='line'>        else
</span><span class='line'>          NSLog "Error saving Seed Data"
</span><span class='line'>          NSLog("description: %@", error.description)
</span><span class='line'>        end
</span><span class='line'>      }
</span><span class='line'>    )
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.save_test_db!
</span><span class='line'>    defaultLocalContext.MR_saveToPersistentStoreAndWait
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.save_on_main_thread!(callback = nil)
</span><span class='line'>    defaultLocalContext.MR_saveToPersistentStoreWithCompletion(
</span><span class='line'>      lambda { |success, error|
</span><span class='line'>        NSLog("success: %@", success)
</span><span class='line'>        if success
</span><span class='line'>          callback.call(defaultLocalContext) if callback
</span><span class='line'>        else
</span><span class='line'>          NSLog "Error saving Core Data"
</span><span class='line'>          NSLog("description: %@", error.description)
</span><span class='line'>        end
</span><span class='line'>      }
</span><span class='line'>    )
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.save_on_background_thread!(callback = nil, completion_callback = nil)
</span><span class='line'>    MagicalRecord.saveWithBlock(
</span><span class='line'>      lambda { |localContext|
</span><span class='line'>        callback.call(localContext) if callback
</span><span class='line'>      },
</span><span class='line'>      completion: lambda { |success, error|
</span><span class='line'>        NSLog("success: %@", success)
</span><span class='line'>        if success
</span><span class='line'>          completion_callback.call if completion_callback
</span><span class='line'>        else
</span><span class='line'>          NSLog "Error saving Core Data"
</span><span class='line'>          NSLog("description: %@", error.description)
</span><span class='line'>        end
</span><span class='line'>      }
</span><span class='line'>    )
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>In <code>AppDelegate</code> <code>didFinishLaunchingWithOptions</code> I call <code>Database.loadOrCreate</code>. As the name implies, this
will either load my existing Core Data stack or it will set up a new one.</p>

<p>I also cleanup the database when my app closes via this method in the <code>AppDelegate</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  def applicationWillTerminate application
</span><span class='line'>    Database.cleanUp
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<h2>Entities</h2>

<p>I create my Core Data entities in Xcode (although I do intend to look at the <a href="https://github.com/infinitered/ruby-xcdm">ruby-xcdm gem</a> so I can stop using Xcode).</p>

<p>For now, the <a href="https://github.com/yury/ib">ib gem</a> is great for allowing us to fire up Xcode just when we need it.
The gem is mostly geared around using Interface Builder but I don&#8217;t use it for that.</p>

<p>Once you&#8217;ve installed the gem run:</p>

<pre><code>$ rake ib:open
</code></pre>

<p>This will open Xcode. Inside the Resources folder on the left hand side there
will be a <code>.xcdatamodeld</code> file. Select this and you can create your entities.</p>

<p>One thing to remember is to set the <code>Class</code> of each Entity to the corresponding <code>Class</code>
in your app. Otherwise it will be a standard <code>NSManagedObject</code>.</p>

<p>So for each Entiy I create a corresponding class like so. Note it inherits from my
own <code>CustomNSManagedObject</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ToDoItem &lt; CustomNSManagedObject
</span><span class='line'>  # more methods go here
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>I give each Entity <code>created_at</code> and <code>id</code> attributes in order to help with querying.</p>

<h2>ActiveRecord Style Behaviour</h2>

<p>The subclass of NSManagedObject I use looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CustomNSManagedObject &lt; NSManagedObject
</span><span class='line'>
</span><span class='line'>  def self.defaultContext
</span><span class='line'>    CurrentSaveGame.localContext
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.all(context = nil)
</span><span class='line'>    localContext = context || defaultContext
</span><span class='line'>    self.MR_findAllSortedBy("created_at", ascending:true, inContext: localContext)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.first(context = nil)
</span><span class='line'>    localContext = context || defaultContext
</span><span class='line'>    self.MR_findFirstOrderedByAttribute("created_at", ascending:true, inContext: localContext)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.last(context = nil)
</span><span class='line'>    localContext = context || defaultContext
</span><span class='line'>    self.MR_findFirstOrderedByAttribute("created_at", ascending:false, inContext: localContext)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.count
</span><span class='line'>    self.MR_numberOfEntities
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.find(id, context = nil)
</span><span class='line'>    localContext = context || defaultContext
</span><span class='line'>    self.MR_findFirstByAttribute("id", withValue:id, inContext: localContext)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.new(attributes)
</span><span class='line'>    self.build(attributes)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.build(attributes = {}, context = nil)
</span><span class='line'>    localContext = context || defaultContext
</span><span class='line'>    model = self.MR_createInContext(localContext)
</span><span class='line'>    model.setValuesForKeysWithDictionary(attributes)
</span><span class='line'>    model.created_at = Time.now
</span><span class='line'>    model
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def switch_context(localContext)
</span><span class='line'>    self.MR_inContext(localContext)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def attributes
</span><span class='line'>    self.entity.attributesByName.keys.each_with_object({}) do |attribute, attributes_hash|
</span><span class='line'>      attributes_hash[attribute] = self.send(attribute)
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Essentially this class gives me ActiveRecord like behaviour. Also, like my <code>Database</code> class,
it ensures I contain some more <code>MagicalRecord</code> calls to a single place.</p>

<p>This means I can do:</p>

<pre><code>ToDoItem.build(
  {
    id: 1,
    action: "Lorem ipsum dolor sit amet"
  }
)
</code></pre>

<p>My build method automatically inserts a <code>created_at</code> for every new record.</p>

<h2>Data store</h2>

<p>By default <code>MagicalRecord.setupAutoMigratingCoreDataStack</code> will use SQLite to
persist your data.</p>

<p>Note that I don&#8217;t include a <code>save</code> method in <code>CustomNSManagedObject</code>. Saving an individual
record isn&#8217;t the most efficient way to persist changes in Core Data. Everything is held
in memory until the relevant context is told to save. Hence why I&#8217;ve put the
<code>save</code> method in the <code>Database</code> class.</p>

<h2>Persisting data on the main thread</h2>

<p>If you&#8217;ve used any of the CustomNSManagedObject methods like <code>find</code>, <code>all</code>, or <code>build</code>
without passing in a context then using <code>Database.save_on_main_thread!</code> will persist any
changes made. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new_item = ToDoItem.build(
</span><span class='line'>  {
</span><span class='line'>    id: 2
</span><span class='line'>    action: "Some other todo item"
</span><span class='line'>  }
</span><span class='line'>)
</span><span class='line'>Database.save_on_main_thread!</span></code></pre></td></tr></table></div></figure>


<h2>Persisting data on background threads</h2>

<p>However, if updates are made on a background thread, then we need a new (temporary)
context which is handled by <code>Database.save_on_background_thread!</code>.</p>

<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Database.save_on_background_thread!(
</span><span class='line'>  lambda { |localContext|
</span><span class='line'>    new_item = ToDoItem.build(
</span><span class='line'>      {
</span><span class='line'>        id: 2
</span><span class='line'>        action: "Some other todo item"
</span><span class='line'>      },
</span><span class='line'>      localContext
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Alternatively if you don&#8217;t want to wrap everything in the block. Create a
<code>localContext</code> and hold on to it. Make your changes and then save later down the line.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>localContext = Database.backgroundLocalContext
</span><span class='line'>new_item = ToDoItem.build(
</span><span class='line'>  {
</span><span class='line'>    id: 2
</span><span class='line'>    action: "Some other todo item"
</span><span class='line'>  },
</span><span class='line'>  localContext
</span><span class='line'>)
</span><span class='line'>Database.save_specific_context(localContext)</span></code></pre></td></tr></table></div></figure>


<p>Note most of the class methods in <code>CustomNSManagedObject</code> take an optional context so they
can be used on background threads.</p>

<h2>Testing</h2>

<p>For tests I use the in memory data store and when saving it is synchronous. This ensures the data is there before the assertions!</p>

<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe "SomeTest" do
</span><span class='line'>
</span><span class='line'>  before do
</span><span class='line'>    Database.cleanUp
</span><span class='line'>    Database.createTestDB
</span><span class='line'>    @localContext = Database.defaultLocalContext
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  describe "some_method" do
</span><span class='line'>
</span><span class='line'>    context "when some scenario" do
</span><span class='line'>
</span><span class='line'>      it "should assign something is true" do
</span><span class='line'>        # ...
</span><span class='line'>      end
</span><span class='line'>
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging to the console in RubyMotion]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/10/29/logging-to-the-console-in-rubymotion/"/>
    <updated>2013-10-29T08:44:00+00:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/10/29/logging-to-the-console-in-rubymotion</id>
    <content type="html"><![CDATA[<p>The simplest way to output to the console from your RubyMotion app is to use
<code>puts</code>. This works fine when your app is running in the simulator. However,
<code>puts</code> does not output to the console when your app is running on the device
itself.</p>

<p>You can view the live logs while your app is running on your usb connected device via:</p>

<pre><code>$ motion device:console
</code></pre>

<p>You will see messages from your application alongside those from other apps or
the system itself.</p>

<p>Instead of using <code>puts</code>, you&#8217;ll need to make use of <code>NSLog</code>. For example</p>

<pre><code>NSLog("My debug messge")
</code></pre>

<p>Note, however, that the first argument for <code>NSLog</code> is actually a <a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/Strings/Articles/formatSpecifiers.html">String Format Specifier</a>.</p>

<p>The following are equivalent:</p>

<pre><code>puts "A #{variable} goes here"
NSLog("A %@ goes here", variable)
</code></pre>

<p>Just remember that any <code>NSLog</code> messages you leave in your app will be visible
to the curious, even after you&#8217;ve released to the App Store.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using LLDB to debug a RubyMotion app]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/10/16/using-lldb-to-debug-a-rubymotion-app/"/>
    <updated>2013-10-16T12:37:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/10/16/using-lldb-to-debug-a-rubymotion-app</id>
    <content type="html"><![CDATA[<p>RubyMotion now uses <a href="http://lldb.llvm.org/">LLDB</a> for debugging. Previously it
used GDB.</p>

<p>If you&#8217;re getting random crashes with little or no backtrace it may be down to
a memory allocation issue.</p>

<p>Launch your application with the debugger running via:</p>

<pre><code>$ rake debug=1 NSZombieEnabled=YES MallocStackLogging=1
</code></pre>

<p>Trigger your bug and you should get output in Terminal like this:</p>

<pre><code>2013-10-16 10:17:19.594 YourAppName[68253:a0b] *** -[UIBarButtonItem isSystemItem]: message sent to deallocated instance 0x9fd56f0
Process 68253 stopped
* thread #1: tid = 0x3127cd, 0x03ac0811 CoreFoundation`___forwarding___ + 769, queue = 'com.apple.main-thread, stop reason = EXC_BREAKPOINT (code=EXC_I386_BPT, subcode=0x0)
    frame #0: 0x03ac0811 CoreFoundation`___forwarding___ + 769
CoreFoundation`___forwarding___ + 769:
-&gt; 0x3ac0811:  jmp    0x3ac090c                 ; ___forwarding___ + 1020
   0x3ac0816:  movl   %edi, (%esp)
   0x3ac0819:  calll  0x3bb840e                 ; symbol stub for: class_getSuperclass
   0x3ac081e:  movl   %eax, %edi
(lldb)
</code></pre>

<p>Leave your application running and open a separate tab in Terminal. You can
inspect the <code>malloc_history</code> of the object that has been deallocated via:</p>

<pre><code>/usr/bin/malloc_history 68253 0x9fd56f0
</code></pre>

<p>Note the first argument is the Process ID as indicated where it says
<code>Process 68253 stopped</code>. Note that the Ruby process that performs the build and
launches your app (i.e. rake) is not the same as your app process.</p>

<p>The last argument is the Object Reference as indicated by <code>message sent to deallocated instance 0x9fd56f0</code>.</p>

<p>This (hex) number is the address of a piece of memory where the object we are
interested in (was) located. The other traces in the malloc history are cases
where that same memory location was used.</p>

<p>Running the above command will give you a dump of information from the stack logs.
I&#8217;ve truncated the following example, as the information is plentiful, but it
shows the kind of output you can expect:</p>

<pre><code>malloc_history Report Version:  2.0
Process:         YourAppName [68253]
Path:            /path/to/YourAppName
Load Address:    0x1000
Identifier:      YourAppName
Version:         ??? (???)
Code Type:       X86 (Native)
Parent Process:  debugserver [68922]

Date/Time:       2013-10-16 11:14:24.104 +0100
OS Version:      Mac OS X 10.8.5 (12F45)
Report Version:  7

ALLOC 0x9fd56f0-0xa64da98 [size=425]: thread_4925a28 |start | main | UIApplicationMain | -[UIApplication _run] | CFRunLoopRunInMode | CFRunLoopRunSpecific | __CFRunLoopRun | __CFRunLoopDoSource1 | __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ | PurpleEventCallback | _PurpleEventCallback | _UIApplicationHandleEvent | -[UIApplication sendEvent:] | ...

FREE  0x9fd56f0-0xa64da98 [size=425]: thread_4925a28 |start | main | UIApplicationMain | -[UIApplication _run] | CFRunLoopRunInMode | CFRunLoopRunSpecific | __CFRunLoopRun | __CFRunLoopDoSource1 | __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ | PurpleEventCallback | _PurpleEventCallback | _UIApplicationHandleEvent | -[UIApplication sendEvent:] | ...

ALLOC 0x9fd56f0-0xa64dacf [size=112]: thread_4925a28 |start | main | UIApplicationMain | GSEventRun | GSEventRunModal | CFRunLoopRunInMode | CFRunLoopRunSpecific | ... | rb_scope__initWithFillColor:__ | vm_dispatch | rb_vm_dispatch | builtin_ostub1(objc_object* (*)(objc_object*, objc_selector*, ...), objc_selector*, objc_object*, unsigned char, int, unsigned long*) | _objc_rootAlloc | class_createInstance | calloc | malloc_zone_calloc
</code></pre>

<p>The output shows there had been two mallocs in the life span of the app and only
one was freed.</p>

<p>If I was not expecting the first ALLOC to be freed, then I would investigate the
trace of the FREE to figure out why it was freed. Alternatively if I was expecting
the second ALLOC to be FREEd as well, then I would know that did not happen.</p>

<p>I knew I was expecting the memory to be freed and it was towards the end of the
second ALLOC block I could see my own method <code>initWithFillColor</code> being called.</p>

<p>I was subclassing <code>UIBarButtonItem</code> with my method <code>initWithFillColor</code> like so:</p>

<pre><code>  class MenuButton &lt; UIBarButtonItem

    def initWithFillColor(fillColor)
      UIBarButtonItem.alloc.initWithCustomView(button(fillColor))
    end

    private

    def showMenu
      # ...
    end

    def button(fillColor)
      UIMenuButtonIcon.alloc.initWithFrame(CGRectMake(0.0, 0.0, 25, 15), fillColor:fillColor).tap do |button|
        button.addTarget(self, action:"showMenu", forControlEvents:UIControlEventTouchUpInside)
      end
    end

  end
</code></pre>

<p>My <code>initWithFillColor</code> method obviously doesn&#8217;t need to create another instance
of <code>UIBarButtonItem</code>. So I updated it to the following and my memory bug was gone:</p>

<pre><code>def initWithFillColor(fillColor)
  initWithCustomView(button(fillColor))
end
</code></pre>

<p>Hopefully this is a good start for debugging any memory bugs in your RubyMotion
apps.</p>

<p>Thanks to the latest HipByte employee, <a href="http://blog.rubymotion.com/post/62652618638/eloy-duran-joins-the-rubymotion-team">Eloy Durán</a>, for the tips!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to debug Core Data output to the console in RubyMotion]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/10/09/how-to-debug-core-data-output-to-the-console-in-rubymotion/"/>
    <updated>2013-10-09T08:18:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/10/09/how-to-debug-core-data-output-to-the-console-in-rubymotion</id>
    <content type="html"><![CDATA[<p>Core Data can show you the underlying queries and execution times whilst you
are running your app. Just fire it up with:</p>

<pre><code>rake args="-com.apple.CoreData.SQLDebug 1"
</code></pre>

<p>Note you can bump the number up to 2 or 3 depending on how much information
you want. 3 goes as far as to show you the result set Core Data has fetched.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting the status bar colour for iOS7 in RubyMotion]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/10/01/setting-the-status-bar-colour-for-ios7-in-rubymotion/"/>
    <updated>2013-10-01T10:44:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/10/01/setting-the-status-bar-colour-for-ios7-in-rubymotion</id>
    <content type="html"><![CDATA[<p>First things first you need to set <code>UIViewControllerBasedStatusBarAppearance</code> in
your <code>info.plist</code>.</p>

<p>This is done by updating your <code>Rakefile</code> like so:</p>

<pre><code>app.info_plist['UIViewControllerBasedStatusBarAppearance'] = true
</code></pre>

<p>Now you need to implement the method <code>preferredStatusBarStyle</code> in your subclassed
<code>UINavigationController</code>:</p>

<pre><code>class MyCustomNavigationController &lt; UINavigationController

  def preferredStatusBarStyle
    UIStatusBarStyleLightContent
  end

end

class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)
    @window.makeKeyAndVisible
    controller = YourFirstController.alloc.init
    @window.rootViewController = MyCustomNavigationController.alloc.initWithRootController(controller)
    return true
  end
end
</code></pre>

<p>Note that <code>UIStatusBarStyleLightContent</code> will turn your status bar text color to white.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use the Crittercism Cocoapod in a RubyMotion app]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/07/01/how-to-use-the-crittercism-cocoapod-in-a-rubymotion-app/"/>
    <updated>2013-07-01T10:24:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/07/01/how-to-use-the-crittercism-cocoapod-in-a-rubymotion-app</id>
    <content type="html"><![CDATA[<p><a href="http://www.crittercism.com">Crittercism</a> is a great way of collecting data and
crash reports from your iOS application whilst it&#8217;s being used in realtime.</p>

<p>The easiest way to get it up and running in your RubyMotion app is to <a href="http://cocoapods.org/?q=crittercism">use the Coacoapod</a>.</p>

<p>If you haven&#8217;t setup Coacoapods in your app yet then check out my article
where I <a href="http://paulsturgess.co.uk/blog/2013/05/15/using-native-objective-c-cocoapod-libraries-in-rubymotion/">install the ViewDeck Cocoapod</a>.</p>

<p>Update your <code>Rakefile</code> with:</p>

<pre><code>Motion::Project::App.setup do |app|
  # ...

  app.frameworks += [
    'SystemConfiguration'
  ]

  app.pods do
    pod 'CrittercismSDK'
  end
end
</code></pre>

<p>Locate your Crittercism App id under Settings on the Crittercism website. Update
your <code>app_delegate.rb</code> with the following just before you call <code>makeKeyAndVisible</code>:</p>

<pre><code>crittercism_app_id = "51d1421f97c8f273e0000007"
Crittercism.enableWithAppID(crittercism_app_id)
</code></pre>

<p>Now when you build your app and errors get raised, you&#8217;ll start receiving crash
reports.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Memory Profile a RubyMotion application using Instruments]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/06/28/how-to-memory-profile-a-rubymotion-application-using-instruments/"/>
    <updated>2013-06-28T09:54:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/06/28/how-to-memory-profile-a-rubymotion-application-using-instruments</id>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/mac/#documentation/developertools/conceptual/InstrumentsUserGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004652-CH1-SW1">Instruments</a>, to quote Apple, &#8220;is a performance, analysis, and testing tool for dynamically tracing and profiling OS X and iOS code&#8221;.</p>

<p>Essentially it gives you live data while your application is running to
help track down memory leaks and performance issues.</p>

<h2>Profiling in the simulator</h2>

<p>Simply fire your application up and then open Xcode. Open Instruments via the menu:</p>

<pre><code>Xcode &gt; Open Developer Tool &gt; Instruments
</code></pre>

<p>Once Instruments had opened, I elected to keep the icon in the dock. This just
saves having to open Xcode each time I want to run Instruments.</p>

<p>Once you&#8217;ve chosen the type of profiling you want to perform, from the <code>Choose Target</code>
dropdown select, select <code>Attach to Process</code>. Under the <code>System</code> heading you should
see the name of your app to select.</p>

<p>Finally hit the record button and you&#8217;re good to go.</p>

<h2>Profiling whilst your app is running on your device</h2>

<p>First up make sure your device is recognised by Xcode to be &#8220;used for development&#8221;.</p>

<p>If you haven&#8217;t done this, connect your device to your computer and open Xcode
and open the organiser via:</p>

<pre><code>Xcode &gt; Window &gt; Organizer
</code></pre>

<p>Find your device and select &#8220;Use for development&#8221;</p>

<p>Now in Instruments you should be able to select your iPhone as a target. Then under
<code>Choose Target</code> you should get a list of your apps to choose from.</p>

<p>Note that your application must have been provisioned using a development profile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to view the RubyMotion release notes]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/06/27/how-to-view-the-rubymotion-release-notes/"/>
    <updated>2013-06-27T09:28:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/06/27/how-to-view-the-rubymotion-release-notes</id>
    <content type="html"><![CDATA[<p>Presuming you have RubyMotion installed. This one-liner should open the release
notes in your favourite editor:</p>

<pre><code>$ open /Library/RubyMotion/NEWS
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup TestFlight for a RubyMotion app]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/05/23/how-to-setup-testflight-for-a-rubymotion-app/"/>
    <updated>2013-05-23T11:06:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/05/23/how-to-setup-testflight-for-a-rubymotion-app</id>
    <content type="html"><![CDATA[<p>The official RubyMotion guide for <a href="http://www.rubymotion.com/developer-center/articles/testflight/">installing TestFlight</a>
got me most of the way there, but there were a few additional steps I needed to
get everything working.</p>

<p>First and foremost <a href="http://paulsturgess.co.uk/blog/2013/05/10/using-rubymotion-to-provision-an-app-onto-your-iphone/">I got my app running on my own device via usb</a>.</p>

<p>However, for TestFlight, an Adhoc Provisioning Profile is required, as opposed
to a Development Provisioning Profile. Essentially this is an Apple approved
license to distribute your app to a limited number of devices without using the
App Store.</p>

<h2>Create a distribution certificate</h2>

<p>Go to the Apple iOS developer website and create a Distribution certficate in a
similar way to how you created your Developer certificate.</p>

<h2>Create a fixed App ID</h2>

<p>This is optional, but it felt right to me to use a fixed App ID instead of a
wildcard.</p>

<h2>Create an adhoc distribution profile</h2>

<p>Finally, still on the Apple iOS Developer website, create an Adhoc distribution
profile, download it and double click it to install it.</p>

<h2>Setting up your Rakefile for multiple environments</h2>

<p>I wanted to use both my Developer and Adhoc Provisioning Profiles at the same
time. Without having to worry about switching them when required.</p>

<p>My Rakefile looks like this:</p>

<pre><code>Motion::Project::App.setup do |app|
  env = if ENV['adhoc'] == '1'
          'adhoc'
        else
          'dev'
        end

  app.name = 'MyApp'

  # Provisioning profiles
  if env == 'adhoc'
    app.identifier = 'com.mydomain.myapp'
    app.codesign_certificate = 'iPhone Distribution: Company (XXXXXXXXXX)'
    app.provisioning_profile = '/path/to/adhoc/provisioing/profile/example.mobileprovision'
    app.entitlements['get-task-allow'] = false
  else
    app.identifier = 'com.mydomain.myapp'
    app.codesign_certificate = 'iPhone Developer: My Name (XXXXXXXXXX)'
    app.provisioning_profile = '/path/to/development/provisioing/profile/example.mobileprovision'
  end

  # TestFlight config
  app.testflight.sdk = 'vendor/TestFlight'
  app.testflight.api_token = 'sometoken'
  app.testflight.team_token = 'anothertoken'
end

desc "Set the env to 'adhoc'"
task :set_adhoc do
  ENV['adhoc'] = '1'
end

desc "Run Testflight with the adhoc provisioning profile"
# e.g. rake tf notes="My release notes"
task :tf =&gt; [
  :set_adhoc,
  :testflight
]
</code></pre>

<p>Credit to Hwee-Boon Yar for writing up <a href="http://hboon.com/different-settings-for-development-and-adhoc-builds-in-rubymotion/">how to setup the Rakefile for multiple environments</a></p>

<p>Your API token is under your account settings on TestFlight at: <a href="https://testflightapp.com/account/#api">https://testflightapp.com/account/#api</a>.</p>

<p>You can find your team API token at the following url: <a href="https://testflightapp.com/dashboard/team/edit/">https://testflightapp.com/dashboard/team/edit/</a></p>

<p>One key bit of information I was initially missing was setting <code>get-task-allow</code>
to false. This is only required for the Adhoc Provisioning Profile.</p>

<h2>Use a custom rake task to deploy to TestFlight</h2>

<p>Notice the rake task at the bottom sets the adhoc variable to ensure the Adhoc
provisioning profile is used before firing off the TestFlight task added by
<code>motion-testflight</code>.</p>

<p>So from now on I release to TestFlight via:</p>

<pre><code>$ rake tf notes="My release notes"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup a test only group in Bundler for RubyMotion]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/05/16/how-to-setup-a-test-only-group-in-bundler-for-rubymotion/"/>
    <updated>2013-05-16T14:30:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/05/16/how-to-setup-a-test-only-group-in-bundler-for-rubymotion</id>
    <content type="html"><![CDATA[<p>Coming from a Ruby on Rails background, it&#8217;s common place to see the Gemfile
declarations in logical groups. This ensures your gems only get required in the
environment they are needed.</p>

<p>A similar setup can be achieved in RubyMotion by tweaking your <code>Gemfile</code> and
<code>Rakefile</code>.</p>

<p>In your Gemfile:</p>

<pre><code>source "https://rubygems.org"
gem 'rake'
gem 'motion-cocoapods'

group :spec do
  gem 'motion-redgreen'
end
</code></pre>

<p>In your Rakefile:</p>

<pre><code>if ARGV.join(' ') =~ /spec/
  Bundler.require :default, :spec
else
  Bundler.require
end
</code></pre>

<p>Thanks to the <a href="https://github.com/tkadauke/TinyMon">TinyMon</a> application where
I first saw this setup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using native Objective-C Cocoapod libraries in RubyMotion]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/05/15/using-native-objective-c-cocoapod-libraries-in-rubymotion/"/>
    <updated>2013-05-15T13:40:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/05/15/using-native-objective-c-cocoapod-libraries-in-rubymotion</id>
    <content type="html"><![CDATA[<p>Whilst RubyMotion is new, and the number of <a href="http://rubymotion-wrappers.com/">RubyMotion specific libraries</a>
is growing fast, there are already loads of native Objective-C libraries out there.</p>

<p>These instructions show you how to use <a href="http://cocoapods.org">Cocoapods</a> in
combination with <a href="http://gembundler.com">Bundler</a>.</p>

<p>Cocoapods is a dependency manager, like <a href="http://rubygems.org">RubyGems</a>, but for
Objective-C projects.</p>

<p>In this example, I&#8217;ve chosen to install <a href="https://github.com/Inferis/ViewDeck">ViewDeck</a>. ViewDeck
makes it easy to implement the sliding panel user interface made popular by the
Facebook iOS app.</p>

<p>The <a href="http://cocoapods.org">CocoaPods website</a> is a great place to search for
available &#8216;Pods&#8217;.</p>

<h2>Summary of steps</h2>

<ul>
<li>Include the motion-cocoapods gem</li>
<li>Setup Cocoapods</li>
<li>Add ViewDeck to your application Rakefile</li>
</ul>


<h2>Bundler</h2>

<p>If you haven&#8217;t got Bundler setup, I&#8217;ve written some
<a href="http://paulsturgess.co.uk/blog/2013/05/13/setting-up-bundler-and-rvm-for-a-rubymotion-app/">instructions for using Bundler with RubyMotion</a>.</p>

<h2>Cocoapods</h2>

<p>Add cocoapods to your Gemfile:</p>

<pre><code>gem 'motion-cocoapods'
</code></pre>

<p>Install the gem via bundler:</p>

<pre><code>$ bundle
</code></pre>

<p>Setup Cocoapods via:</p>

<pre><code>$ pod setup
</code></pre>

<h2>Add ViewDeck to your Rakefile</h2>

<p>In your Rakefile you need to add the ViewDeck pod and QuartzCore Framework
(required by ViewDeck):</p>

<pre><code>Motion::Project::App.setup do |app|
  # Frameworks
  app.frameworks += [
    'QuartzCore'
  ]

  # Cocoapods
  app.pods do
    pod 'ViewDeck'
  end
end
</code></pre>

<p>Finally tell <code>motion-cocoapods</code> to download your dependencies by running:</p>

<pre><code>$ rake pod:install
</code></pre>

<p>ViewDeck will be automatically built and linked the next time you build your app.</p>

<p>In future you can grab updated versions by running:</p>

<pre><code>$ rake pod:update
</code></pre>

<h2>Using ViewDeck</h2>

<p>I&#8217;ve ported the Objective-C example ViewDeck application over to RubyMotion.</p>

<p><a href="https://github.com/paulsturgess/ViewDeckExample-RubyMotion">Feel free to check it out</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Bundler and RVM for a RubyMotion app]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/05/13/setting-up-bundler-and-rvm-for-a-rubymotion-app/"/>
    <updated>2013-05-13T10:00:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/05/13/setting-up-bundler-and-rvm-for-a-rubymotion-app</id>
    <content type="html"><![CDATA[<p>Create your rvm <code>.ruby-version</code> and <code>.ruby-gemset</code> files via:</p>

<pre><code>$ rvm use 1.9.3@yourgemsetname --create --ruby-version
</code></pre>

<p>Add bundler to your <code>Rakefile</code></p>

<pre><code>require 'bundler'
Bundler.require
</code></pre>

<p>Create your <code>Gemfile</code> via:</p>

<pre><code>$ bundle init
</code></pre>

<p>Update your <code>Gemfile</code></p>

<pre><code>source "https://rubygems.org"
gem "your-favourite-gem"
</code></pre>

<p>Install gems via:</p>

<pre><code>$ bundle
</code></pre>

<p>You&#8217;re done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RubyMotion to provision an app onto your iPhone]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/05/10/using-rubymotion-to-provision-an-app-onto-your-iphone/"/>
    <updated>2013-05-10T21:49:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/05/10/using-rubymotion-to-provision-an-app-onto-your-iphone</id>
    <content type="html"><![CDATA[<p>So you&#8217;ve got your <a href="https://developer.apple.com/">Apple developer account</a> and
now you want to get your RubyMotion app onto your iPhone.</p>

<p>At the end of these instructions you will be able to deploy multiple apps using
the same provisioning profile. Ideal for prototyping.</p>

<h2>Summary of what you need to do</h2>

<ul>
<li>Generate an iOS certificate</li>
<li>Create an App ID</li>
<li>Register your iPhone with your Apple Developer account</li>
<li>Create a Provisioning Profile</li>
<li>Update your RubyMotion Rakefile to use the Certificate and the Provisioning Profile</li>
</ul>


<h2>Generate an iOS certificate</h2>

<p>Open the Keychain Access program on your Mac and from the dropdown menu choose:</p>

<p><code>Keychain Access &gt; Certificate Assistant &gt; Request a certificate from a certificate authority</code></p>

<p>The &#8216;common name&#8217; is the name for your private key. You can choose whatever
you like.</p>

<p>Just make sure you select to <code>save to disk</code>.</p>

<p>Now you need to sync this up with your Apple Developer account.</p>

<p>Visit <a href="https://developer.apple.com">The Apple iOS Dev Centre</a> and go to the
<code>Certificates, Identities &amp; Profiles</code> section.</p>

<p>Go to <code>Certificates &gt; Development</code> and select to add a new certificate. Follow
the step process, uploading the certificate you just created.</p>

<p>At the end you need to download the <code>.cer</code> file that gets generated. Double
click it to add to your Keychain.</p>

<h2>Create an App ID</h2>

<p>In that same section of the website you can create an App ID by going to
<code>Identifiers &gt; App ID's</code>.</p>

<p>I opted for the Wildcard App ID. The wildcard ID means I don&#8217;t need to create a
new App ID &amp; Profile for each new app I want to try out on my iPhone.</p>

<p>Obviously when it comes to App Store submission, then it will make sense to have
a dedicated App ID. Also Apple recommend a dedicated App ID if you&#8217;re testing
advanced features like Push Notifications.</p>

<h2>Register your iPhone with your Apple Developer account</h2>

<p>Again staying on the iOS Dev Center website, you need to register all the
devices you want to deploy your app onto.</p>

<p>You only need to do this once for each device, but you&#8217;ll need to know the UDID
for each one.</p>

<p>You can get your UDID by plugging your iPhone into your computer via a USB cable
and firing up Xcode. It&#8217;s labelled as <code>Identifier</code> on the details screen that lists
the model and serial number etc.</p>

<h2>Create a Provisioning Profile</h2>

<p>The last task on the iOS Dev Center website is to create a
<code>Development Provisioning Profile</code>.</p>

<p>All the instructions are self-explanatory so I won&#8217;t repeat them here. Essentially
you are combining the certificate, the App ID and the Device ID(s) that you have
setup.</p>

<p>Just make sure you download and double click the <code>.mobileprovision</code> file at the end.</p>

<h2>Update your RubyMotion Rakefile to use the Certificate &amp; Provisioning Profile</h2>

<p>Update your <code>Rakefile</code> in your app:</p>

<pre><code>Motion::Project::App.setup do |app|
  app.name = 'ExampleApp'
  app.identifier = 'com.yourdomain.exampleapp'
  app.codesign_certificate = 'iPhone Developer: Your Name (XXXXXXXXXX)'
  app.provisioning_profile = '/path/to/your/provisioning/profile/Example_App.mobileprovision'
end
</code></pre>

<p>Note that Wildcard App Id means you can use any name for the third part of the
identifier.</p>

<p>Also for the <code>codesign_certificate</code>, you can view this in the Keychain Access
program.</p>

<p>Finally deploy to the device via:</p>

<pre><code>$ rake device
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C for a Rubyist]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/04/25/objective-c-for-a-rubyist/"/>
    <updated>2013-04-25T21:04:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/04/25/objective-c-for-a-rubyist</id>
    <content type="html"><![CDATA[<p><a href="http://www.rubymotion.com/">RubyMotion</a> does a great job of allowing iOS apps to be written in Ruby. However,
whilst I want to avoid writing Objective-C, I do want to learn how to read it.</p>

<ul>
<li>It&#8217;ll make it easier to learn Apple&#8217;s SDK</li>
<li>I want to be able to read existing iOS books/articles/stackoverflow solutions</li>
<li>It just seems like a good idea</li>
</ul>


<p>Fortunately both languages stem from Smalltalk, so they&#8217;re not a million miles
apart.</p>

<h2>Instance variables</h2>

<pre><code>- (void)instanceVariable;
</code></pre>

<ul>
<li><code>-</code> means instance.</li>
<li>next is the return type: <code>void</code> which means it returns nothing.</li>
<li>Finally we have the method name, in this case <code>instanceVariable</code>.</li>
</ul>


<p>Everything in Objective-C is camelCase. The common idiom in
 RubyMotion is to write Ruby in camel case where you are implementing
 classes that use Apple&#8217;s Objective-C methods. Reverting back to snake_case when
 the class is pure Ruby.</p>

<h2>Class methods</h2>

<pre><code>+ (User *)userWithName:(NSString *)name;
</code></pre>

<ul>
<li><code>+</code> means class method</li>
<li>next is the return type. In this case a <code>User</code> pointer.</li>
<li>next is the method name: <code>userWithName</code></li>
<li>next is a colon <code>:</code>, which means there is an argument.</li>
<li>next, in brackets, is the argument type. A pointer to an <code>NSString</code> instance.</li>
<li>Finally the argument variable <code>name</code></li>
</ul>


<p>So just be clear, in Ruby this is:</p>

<pre><code>def self.userWithName(name)
    #...
end
</code></pre>

<h2>Sending messages</h2>

<p>As with all Smalltalk based languages, you are essentially creating methods in
classes to send messages around. I believe Objective-C does have a dot notation,
like Ruby, but most code examples I&#8217;ve come across use spaces and lots of square
brackets.</p>

<p>For example in Objective-C sending the <code>logOut</code> message to a <code>user</code> object is:</p>

<pre><code>[user logOut];
</code></pre>

<p>The Ruby equivalent:</p>

<pre><code>user.logOut
</code></pre>

<p>To chain methods in Objective-C it looks like:</p>

<pre><code>NSMutableArray *myArray = [[NSMutableArray alloc] init];
</code></pre>

<p>This is equivalent to the Ruby:</p>

<pre><code>myArray = NSMutableArray.alloc.init
</code></pre>

<h2>reallyLongMethod:WithNamedParameters:</h2>

<p>In Objective-C named parameters are heavily used. This is great for clarity, as
they are intended to be as descriptive as possible. Removing the ambiguity is
really good, but it is important to know that named parameters are actually
included in the method name.</p>

<p>So an example Apple SDK method is <code>tableView:numberOfRowsInSection:</code>. Where the
colons indicate an argument is required. So in this case, two. In Objective-C it
looks like:</p>

<pre><code>- (Integer) tableView(tableView, numberOfRowsInSection:section)
</code></pre>

<p>RubyMotion currently runs on Ruby 1.9.3, so named arguments have been added
especially. The above method looks like the following in RubyMotion:</p>

<pre><code>def tableView(tableView, numberOfRowsInSection: section)
  # ...
end
</code></pre>

<p>This can look a bit strange at times when the Apple SDK requires you to implement
methods that start with the same name, but take different arguments. If you are
not aware that the named named arguments are used in the method name, it actually
looks like you&#8217;re implementing the same method multiple times.</p>

<p>For example, another Apple SDK method <code>tableView:editingStyleForRowAtIndexPath:</code> looks very similar in RubyMotion:</p>

<pre><code>def tableView(tableView, editingStyleForRowAtIndexPath: indexPath)
  # ...
end
</code></pre>

<h2>In summary</h2>

<p>Objective-C is definitely more verbose, but I really like the RubyMotion
implementation. There&#8217;s loads more to get my head around, but this is a good
starting point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress & Github pages]]></title>
    <link href="http://paulsturgess.github.io/blog/2013/04/24/hello-octopress-and-github-pages/"/>
    <updated>2013-04-24T19:51:00+01:00</updated>
    <id>http://paulsturgess.github.io/blog/2013/04/24/hello-octopress-and-github-pages</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> is a static blog generator. It uses
<a href="https://github.com/mojombo/jekyll">Jekyll</a> which was created by Github to run
<a href="http://pages.github.com">Github Pages</a> and now I&#8217;m using it to power my
re-launched blog.</p>

<p>I&#8217;m attracted by the prospect of using Octopress because it&#8217;s dead simple. It
generates the blog content as flat pages so it&#8217;s super fast. It allows me to
write using <a href="http://daringfireball.net/projects/markdown/">Markdown</a> and deploy
via <a href="http://git-scm.com/">Git</a>.</p>

<p>There&#8217;s no server setup and no hosting fees, as it&#8217;s hosted using Github
Pages. Also it&#8217;s written in Ruby, so it works with all the tools I&#8217;m familiar with.</p>

<p>What follows is more for my reference than anything, so I can remember how I set
things up.</p>

<h2>Initial setup</h2>

<p>Create a new Github repo named <code>yourgithubusername.github.io</code>.</p>

<p>The name is important here as Github Pages will automatically find this repo and
serve up the content it finds in the <code>master</code> branch as your website at
<code>http://yourgithubusername.github.io</code>.</p>

<p>Grab Octopress and change directory:</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git yourgithubusername.github.io
$ cd yourgithubusername.github.io
</code></pre>

<p>Octopress has its&#8217; own rvmrc file, but I like to use gemsets, so I created my own
before installing bundler and the required gems:</p>

<pre><code>$ rvm use 1.9.3@yourgemsetname --create --rvmrc
$ gem install bundler
$ bundle install
</code></pre>

<p>Install the default theme:</p>

<pre><code>$ rake install
</code></pre>

<p>Octopress has a configuration rake task that automatically sets the repo up for
easy deployment to Github Pages:</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>This task does quite a few things. The most important is that it creates a new
<code>_deploy</code> directory that is another git repository. This is where Octopress
generates the flat website for deployment to the <code>master</code> branch of your repo
on Github.</p>

<p>All the Octopress code used to generate the website into the <code>_deploy</code> directory
now lives in new branch called <code>source</code>. Note in the <code>source</code> branch the
<code>.gitignore</code> includes <code>_deploy</code> so it doesn&#8217;t get committed in two places!</p>

<p>This sounds more complicated than it is, Octopress has rake tasks to make this
really easy to manage. It&#8217;s worth pushing up at this point to check everything
works before tinkering:</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>This copies the generated files into <code>_deploy</code>, adds them to git, commits and
pushes them up to the <code>master</code> branch.</p>

<p>Visit <code>http://yourgithubusername.github.io</code></p>

<p>Note at this point only the website has been committed, the source needs to be
comitted separately via:</p>

<pre><code>$ git add .
$ git commit -m 'Initial source commit'
$ git push origin source
</code></pre>

<h2>Running Octopress locally</h2>

<p>The simplest thing to do is fire up your site on <code>http://localhost:4000</code> via:</p>

<pre><code>$ rake preview
</code></pre>

<p>Alternatively, Octopress works really well with <a href="http://pow.cx">POW server</a>.</p>

<pre><code>$ cd ~/.pow
$ ln -s /path/to/your/octopress/site yoursitename
</code></pre>

<p>Now that you’re setup with POW, in the root of your <code>source</code> branch run:</p>

<pre><code>$ rake watch
</code></pre>

<p>Load up <code>http://yoursitename.dev</code></p>

<h2>Theme customisation</h2>

<p>I&#8217;m using the <a href="https://github.com/lucaslew/whitespace">&#8216;Whitespace&#8217; theme</a> by lucaslew.
 <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Other themes are available</a>.</p>

<p>I&#8217;ve tweaked the header to remove the search and include navigation links to my Twitter and Github accounts.</p>

<p>I installed the theme by running the following in the root of the <code>source</code> branch.
 Say yes when it asks you to overwrite existing files.</p>

<pre><code>$ git clone git://github.com/lucaslew/whitespace.git .themes/whitespace
$ rake install['whitespace']
$ rake generate
</code></pre>

<h2>_config.yml</h2>

<p>This is where the main site configuration lives. Things like the blog title and various 3rd Party Settings, your Twitter and Github handles etc.</p>

<p>Changes to <code>_config.yml</code> will require you to restart the <code>rake watch</code> task if
you&#8217;re using POW server.</p>

<h2>Creating this post</h2>

<p>As easy as:</p>

<pre><code>rake new_post["Hello Octopress and Github pages"]
</code></pre>

<h2>Deploying to Github Pages</h2>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>Just rememeber to manually commit changes made in the <code>source</code> branch.</p>

<h2>Custom domain</h2>

<p>Github have full details on how to do this in their <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">GitHub Pages Documentation</a>.</p>

<p>Inside your <code>source</code> branch run the following:</p>

<pre><code>echo 'your-domain.com' &gt;&gt; source/CNAME
</code></pre>

<p>Regenerate your site and deploy up to Github. In your DNS settings point an
<code>A record</code> (for your naked domain) to <code>204.232.175.78</code>.</p>

<p>For <code>www</code> just point a <code>CNAME record</code> to yourgithubusername.github.io</p>

<h2>Working from another machine</h2>

<p>As the <code>_deploy</code> directory is in the <code>.gitignore</code>, the easiest thing is to clone
the <code>source</code> branch and then setup the <code>_deploy</code> branch manually.</p>

<pre><code>$ git clone -b source git@github.com:username/username.github.io.git username.github.io
$ cd username.github.io
$ bundle install
$ mkdir _deploy
$ cd _deploy
$ git init
$ git remote add origin git@github.com:username/username.github.io.git
$ git pull origin master
$ cd ..
</code></pre>
]]></content>
  </entry>
  
</feed>
